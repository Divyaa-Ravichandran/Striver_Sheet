
URL:  https://leetcode.com/problems/best-time-to-buy-and-sell-stock/description/



class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        

        '''
        #BRUTE TC: O(N^2) and SC:O(1)

        maxP=0
        n=len(prices)
        for i in range(n):
            for j in range(i+1,n):
                if prices[j]>prices[i]:
                    maxP=max(maxP,prices[j]-prices[i])

        return maxP

        '''

        #OPTIMAL : TC: O(N) and SC: O(1)
        minP=float('inf')
        maxP=0
        n=len(prices)
        for i in range(n):
            minP=min(minP,prices[i])
            maxP=max(maxP,prices[i]-minP)

        return maxP
