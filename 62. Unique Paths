URL:  https://leetcode.com/problems/unique-paths/description/



class Solution:
    def uniquePaths(self, m: int, n: int) -> int:
        '''
        memo = [[-1 for _ in range(n)] for _ in range(m)]
        for i in range(m):
            for j in range(n):
                if i == 0 or j == 0:
                    memo[i][j] =  1
                else:
                    memo[i][j] = memo[i][j-1] + memo[i-1][j]
                
        
        return memo[-1][-1]
        '''


OR



        def countPath(i,j,m,n,dp):
            if i==m-1 and j==n-1:
                return 1
            
            if i>=m or j>=n:
                return 0
            if dp[i][j]!=-1:
                return dp[i][j]
            else:
                dp[i][j]=countPath(i+1,j,m,n,dp)+countPath(i,j+1,m,n,dp)

            return dp[i][j]

        dp = [[-1 for _ in range(n + 1)] for _ in range(m + 1)]
        num=countPath(0,0,m,n,dp)

        if m==1 and n==1:
            return num

        return dp[0][0]
