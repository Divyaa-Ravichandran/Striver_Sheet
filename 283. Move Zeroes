

URL:  https://leetcode.com/problems/move-zeroes/


class Solution:
    def moveZeroes(self, nums: List[int]) -> None:
        """
        Do not return anything, modify nums in-place instead.
        """
        '''
        count=0
        for i in range(len(nums)):
            if nums[i]!=0:
                nums[count]=nums[i]
                count+=1

        while count<len(nums):
            nums[count]=0
            count+=1
        '''
        '''
        i = 0
        j = 0
        while j < len(nums):
            if nums[j] == 0:
                j += 1
            else:
                nums[i] = nums[j]
                i += 1
                j += 1
        while i < len(nums):
            nums[i] = 0
            i += 1

        '''

        '''
        #BRUTE FORCE 
        #TC: O(N) + O(X) + O(N-X) ~ O(2*N), where N = total no. of elements, X = no. of non-zero elements, and N-X = total no. of zeros.
        #SC: O(N)

        temp=[]
        n=len(nums)

        for i in range(n):
            if nums[i]!=0:
                temp.append(nums[i])

        non_zero=len(temp)

        for i in range(non_zero):
            nums[i]=temp[i]


        for i in range(non_zero,n):
            nums[i]=0

        return nums

        '''


        j = -1
        n=len(nums)
    # Place the pointer j
        for i in range(n):
            if nums[i] == 0:
                j = i
                break
    
    # No non-zero elements
        if j == -1:
            return nums
    
    # Move the pointers i and j and swap accordingly
        for i in range(j + 1, n):
            if nums[i] != 0:
                nums[i], nums[j] = nums[j], nums[i]
                j += 1
    
        return nums
