URL:  https://leetcode.com/problems/merge-intervals/description/



class Solution:
    def merge(self, intervals: List[List[int]]) -> List[List[int]]:
        '''
        #BRUTE: TC: O(NlogN+O(2N)) Since we traverse intervalsay twice and SC: O(N)
        n=len(intervals)
        
        ans=[]
        intervals.sort()
        for i in range(n):
            start=intervals[i][0]
            end=intervals[i][1]

            if ans and end<=ans[-1][1]:
                continue

            for j in range(i+1,n):
                if intervals[j][0]<=end:
                    end=max(end,intervals[j][1])
                else:
                    break

            ans.append([start,end])

        return ans

        '''


        #OPTIMAL : TC: O(NLogN+O(2N)) and SC: O(N)
        intervals.sort()

        ans = []
        n=len(intervals)

        for i in range(n):
        # if the current interval does not
        # lie in the last interval:
            if not ans or intervals[i][0] > ans[-1][1]:
                ans.append(intervals[i])
        # if the current interval
        # lies in the last interval:
            else:
                ans[-1][1] = max(ans[-1][1], intervals[i][1])
        return ans
