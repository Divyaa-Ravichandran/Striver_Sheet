
URL: https://leetcode.com/problems/longest-consecutive-sequence/


class Solution:
    def longestConsecutive(self, a: List[int]) -> int:

        #BRUTE:  O(N2), N = size of the given array.
#Reason: We are using nested loops each running for approximately N times.

#Space Complexity: O(1), as we are not using any extra space to solve this problem.
        '''
        n = len(a)  # size of array
        if n==0:
            return 0
        longest = 1
    # pick an element and search for its consecutive numbers
        for i in range(n):
            x = a[i]
            cnt = 1
        # search for consecutive numbers using linear search
            while self.linearSearch(a, x + 1):
                x += 1
                cnt += 1

            longest = max(longest, cnt)
        return longest


    def linearSearch(self,a, num):
        n = len(a)  # size of array
        for i in range(n):
            if a[i] == num:
                return True
        return False

        '''


        '''
    #BETTER Time Complexity: O(NlogN) + O(N), N = size of the given array.
#Reason: O(NlogN) for sorting the array. To find the longest sequence, we are using a loop that results in O(N).

#Space Complexity: O(1), as we are not using any extra space to solve this problem.#

        n = len(a)
        if n == 0:
            return 0

    # sort the array
        a.sort()
        lastSmaller = float('-inf')
        cnt = 0
        longest = 1

    # find longest sequence
        for i in range(n):
            if a[i] - 1 == lastSmaller:
            # a[i] is the next element of the
            # current sequence
                cnt += 1
                lastSmaller = a[i]
            elif a[i] != lastSmaller:
                cnt = 1
                lastSmaller = a[i]
            longest = max(longest, cnt)
        return longest
        '''


#O(N) + O(2*N) ~ O(3*N), where N = size of the array.
#Reason: O(N) for putting all the elements into the set data structure. After that for every starting element, we are finding the consecutive elements. Though we are using nested loops, the set will be traversed at most twice in the worst case. So, the time complexity is O(2*N) instead of O(N2).

#Space Complexity: O(N), as we are using the set data structure to solve this problem.
        n = len(a)
        if n == 0:
            return 0

        longest = 1
        st = set()
    # put all the array elements into set
        for i in range(n):
            st.add(a[i])

    # Find the longest sequence
        for it in st:
        # if 'it' is a starting number
            if it - 1 not in st:
            # find consecutive numbers
                cnt = 1
                x = it
                while x + 1 in st:
                    x += 1
                    cnt += 1
                longest = max(longest, cnt)
        return longest





   
